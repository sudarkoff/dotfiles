#!/bin/bash

# Print a status report.
#
# Usage:
#
# To list status for the previous week, type:
# $ get-status -Friday
#
# If the relative date is not passed on the command line, assume the following Friday
# (i.e., print status for the current week).

# TODO: List bugzilla activity
# TODO: cover the following use cases:
#  - if no parameter is passed, list items for the current week (between last Monday and next Sunday)
#  - if a single date is passed, assume it's a Monday of the week of interest and list items for that week
#  - if a date range is passed (mm/dd[/yy]..[mm/dd[/yy]]), list items for that date range

function get_date() {
  if date -v 1d > /dev/null 2>&1; then
    DATE='date -v $1'
  else
    DATE='date --date="$1"'
  fi
  echo eval $DATE
}

DATE=${1:-+Friday}
LOG_OPTS="--no-color --no-timestamp --no-tags"
LOG_DATE_RANGE="$(date -v$DATE -v-4d +%Y-%m-%d)..$(date -v$DATE -v+2d +%Y-%m-%d)"

printf "# $(date -v$DATE -v-4d '+%B %d') -- $(date -v$DATE -v+2d '+%B %d')\n"

printf "\n## Summary\n\n"
printf "<write the executive summary>\n"
log $LOG_OPTS list @task $LOG_DATE_RANGE | sed "s/^/- /"

printf "\n## Discussions/Meetings\n\n"
log $LOG_OPTS list @talk $LOG_DATE_RANGE | sed "s/^/- /"

printf "\n## Reviews\n\n"
log $LOG_OPTS list @review $LOG_DATE_RANGE | sed "s/^/- /"

printf "\n## Commits\n\n"
p4 changes -u $P4USER -s submitted @`date -v$DATE -v-4d +%Y/%m/%d`,@`date -v$DATE -v+2d +%Y/%m/%d` | grep -v automerged
p4 changes -u $P4USER -s pending @`date -v$DATE -v-4d +%Y/%m/%d`,@`date -v$DATE -v+2d +%Y/%m/%d` | grep -v automerged

printf "\n## Next week\n\n"
printf "<what's next?>\n"

